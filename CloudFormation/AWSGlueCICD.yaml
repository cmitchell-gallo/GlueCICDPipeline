AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  RepositoryName:
    Type: String
    Default: glueDemoCICD
  liveTestStackName:
    Type: String
    Default: glueDemoCICDtest
  productionStackName:
    Type: String
    Default: glueDemoCICDprod
Resources:
  Repository:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryDescription: repo for demo Glue ETL
      RepositoryName: !Ref 'RepositoryName'
  CodePipelineBucket:
    Type: AWS::S3::Bucket
  liveTest:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/python:2.7.12
        Type: LINUX_CONTAINER
      Name: !Sub '${AWS::StackName}LT'
      ServiceRole: !GetAtt 'CodePipelineServiceRole.Arn'
      Source:
        BuildSpec: !Join [" ",["version: 0.2\n\nphases:\n  build:\n    commands:\n      pip install boto3 && python datalakelive_tst.py ",!Ref liveTestStackName]]
        Type: CODEPIPELINE        
  firstcommitter:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/python:2.7.12
        Type: LINUX_CONTAINER
      Name: !Sub '${AWS::StackName}initCommit'
      ServiceRole: !GetAtt 'CodePipelineServiceRole.Arn'
      Source:
        BuildSpec: !Join [" ",["version: 0.2\n\nphases:\n  build:\n    commands:\n      git config --global user.email 'you@example.com' && git config --global push.default simple && pip install boto3 && python commitSample.py",!Ref 'GitUser', !Ref 'RepositoryName']]
        Type: S3
        Location: !Join ["/", [!Ref 'CodePipelineBucket' ,"gluedemoetl.zip"]]

  pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref 'CodePipelineBucket'
      RoleArn: !GetAtt 'CodePipelineServiceRole.Arn'
      Stages:
      - Name: Source
        Actions:
        - Name: SourceAction
          ActionTypeId:
            Category: Source
            Owner: AWS
            Version: '1'
            Provider: CodeCommit
          OutputArtifacts:
          - Name: appsource
          Configuration:
            BranchName: master
            RepositoryName: !Ref 'RepositoryName'
          RunOrder: 1
      - Name: LiveTest
        Actions:
        - Name: deploy
          ActionTypeId:
            Category: Deploy
            Owner: AWS
            Version: '1'
            Provider: CloudFormation
          InputArtifacts:
          - Name: appsource
          OutputArtifacts:
          - Name: QADeployStack
          Configuration:
            StackName: !Ref liveTestStackName
            ActionMode: CREATE_UPDATE
            TemplatePath: appsource::gluedatalake.yaml
            Capabilities: CAPABILITY_IAM
            ParameterOverrides: "{\"BucketName\":{\"Fn::GetArtifactAtt\":[\"appsource\"\
              ,\"BucketName\"]}, \"EnvType\":\"test\",\r\n\"ObjectKey\":{\"Fn::GetArtifactAtt\":[\"appsource\"\
              ,\"ObjectKey\"]}}"
            RoleArn: !GetAtt 'CloudFormationRole.Arn'
          RunOrder: 1
        - Name: AutomatedLiveTest
          ActionTypeId:
            Category: Build
            Owner: AWS
            Version: '1'
            Provider: CodeBuild
          InputArtifacts:
          - Name: appsource
          Configuration:
            ProjectName: !Ref 'liveTest'
          RunOrder: 2
        - Name: LiveTestApproval
          ActionTypeId:
            Category: Approval
            Owner: AWS
            Version: '1'
            Provider: Manual
          RunOrder: 3          
        - Name: LiveTestCleanup
          ActionTypeId:
            Category: Deploy
            Owner: AWS
            Version: '1'
            Provider: CloudFormation
          Configuration:
            StackName: !Ref liveTestStackName
            ActionMode: DELETE_ONLY
            TemplatePath: appsource::gluedatalake.yaml
            Capabilities: CAPABILITY_IAM
            RoleArn: !GetAtt 'CloudFormationRole.Arn'
          RunOrder: 4   
      - Name: ProductionDeploy
        Actions:
        - Name: deploy
          ActionTypeId:
            Category: Deploy
            Owner: AWS
            Version: '1'
            Provider: CloudFormation
          InputArtifacts:
          - Name: appsource
          Configuration:
            StackName: !Ref productionStackName
            ActionMode: CREATE_UPDATE
            TemplatePath: appsource::gluedatalake.yaml
            Capabilities: CAPABILITY_IAM
            ParameterOverrides: "{\"BucketName\":{\"Fn::GetArtifactAtt\":[\"appsource\"\
              ,\"BucketName\"]}, \"EnvType\":\"prod\",\r\n\"ObjectKey\":{\"Fn::GetArtifactAtt\":[\"appsource\"\
              ,\"ObjectKey\"]}}"
            RoleArn: !GetAtt 'CloudFormationRole.Arn'
          RunOrder: 1

  DeleteBucketFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt 'CodePipelineServiceRole.Arn'
      Runtime: "python2.7"
      Timeout: 300
      Handler: "index.handler"
      Code: 
        ZipFile: |
         import cfnresponse
         import boto3
         from botocore.client import Config
         import zipfile
         def handler(event, context):
            client = boto3.client('s3')
            destinationbucket = event['ResourceProperties']['bucketName']
            if event['RequestType'] == 'Delete':
               s3 = boto3.resource('s3')
               bucket = s3.Bucket(destinationbucket)
               for key in bucket.objects.all():
                  client.delete_object(Bucket=destinationbucket,  Key=key.key)
            cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, "CustomResourcePhysicalID")
  DeleteBucket:
    Type: Custom::DeleteBucket
    DependsOn: CodePipelineBucket
    Properties:
      ServiceToken: !GetAtt DeleteBucketFunction.Arn
      bucketName: !Ref 'CodePipelineBucket'

  triggerInitialCommitF:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt 'CodePipelineServiceRole.Arn'
      Runtime: "python2.7"
      Timeout: 300
      Handler: "index.handler"
      Code: 
        ZipFile: |
         import cfnresponse
         import boto3
         from botocore.client import Config
         import zipfile
         def handler(event, context):
            client = boto3.client('codebuild')
            jobname = event['ResourceProperties']['jobname']
            if event['RequestType'] == 'Create':
              client.start_build(projectName=jobname)
            cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, "CustomResourcePhysicalID")                        
  triggerInitialCommit:
    Type: Custom::triggerInitialCommit
    DependsOn: Repository
    Properties:
      ServiceToken: !GetAtt triggerInitialCommitF.Arn
      jobname: !Ref firstcommitter

  CopyLambdasFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt 'CodePipelineServiceRole.Arn'
      Runtime: "python2.7"
      Timeout: 300
      Handler: "index.handler"
      Code: 
        ZipFile: |
         import cfnresponse
         import boto3
         from botocore.client import Config
         import zipfile
         def handler(event, context):
            client = boto3.client('s3')
            destinationbucket = event['ResourceProperties']['destinationBucketName']
            sourceBucket = event['ResourceProperties']['sourceBucketName']
            objectKey = event['ResourceProperties']['objectKey']
            if event['RequestType'] != 'Delete':
               s3 = boto3.client('s3')
               s3.copy({ 'Bucket': sourceBucket, 'Key': objectKey}, destinationbucket, objectKey)
            cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, "CustomResourcePhysicalID")                        

  CopyDeployProductLambda:
    Type: Custom::CopyDeployProductLambda
    Properties:
      ServiceToken: !GetAtt CopyLambdasFunction.Arn
      destinationBucketName: !Ref 'CodePipelineBucket'
      sourceBucketName: 'lfcarocomdemo'
      objectKey: 'deployProductYaml.zip'

  CopyDemoAppLambda:
    Type: Custom::CopyDeployProductLambda
    Properties:
      ServiceToken: !GetAtt CopyLambdasFunction.Arn
      destinationBucketName: !Ref 'CodePipelineBucket'
      sourceBucketName: 'lfcarocomdemo'
      objectKey: 'gluedemoetl.zip'


  DeleteCFFunction:
    Type: AWS::Lambda::Function
    DependsOn: CloudFormationRole
    Properties:
      Role: !GetAtt 'CodePipelineServiceRole.Arn'
      Runtime: "python2.7"
      Timeout: 300
      Handler: "index.lambda_handler"
      Code: 
        ZipFile: |
          import boto3
          import cfnresponse
          import time
          cf = boto3.client('cloudformation')
          def lambda_handler(event, context):
              if event['RequestType'] == 'Delete':
                try:
                    stackname = event['ResourceProperties']['stackName']
                    response = cf.delete_stack(StackName=stackname)
                except Exception as e:
                    print('stack deletion due to exception. stackname: ' + stackname) 
                    print(e)
                    cfnresponse.send(event, context, cfnresponse.FAILED, {}, "CustomResourcePhysicalID")
                try:                  
                    cf.describe_stacks(StackName=stackname)
                    time.sleep(240)
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, "CustomResourcePhysicalID")
                except Exception as e:
                    print('describe_stacks due to exception. stackname: ' + stackname) 
                    print(e)
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, "CustomResourcePhysicalID")
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, "CustomResourcePhysicalID")
              return "Success"

  DeleteLiveTestCF:
    Type: Custom::DeleteLiveTestCF
    Properties:
      ServiceToken: !GetAtt DeleteCFFunction.Arn
      stackName: !Ref 'liveTestStackName'

  DeleteprodCF:
    Type: Custom::DeleteLiveTestCF
    Properties:
      ServiceToken: !GetAtt DeleteCFFunction.Arn
      stackName: !Ref 'productionStackName'

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - ec2.amazonaws.com
            - codepipeline.amazonaws.com
            - codebuild.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - s3:*
            Resource: '*'
            Effect: Allow
          - Action:
            - glue:*
            - athena:*
            Resource: '*'
            Effect: Allow
          - Action:
            - s3:PutObject
            Resource: !Sub 'arn:aws:s3:::${CodePipelineBucket}/*'
            Effect: Allow
          - Action:
            - codecommit:CancelUploadArchive
            - codecommit:GetBranch
            - codecommit:GetCommit
            - codecommit:GetUploadArchiveStatus
            - codecommit:UploadArchive
            - codecommit:PutFile
            Resource: '*'
            Effect: Allow
          - Action:
            - iam:PassRole
            Resource: '*'
            Effect: Allow
          - Action:
            - lambda:InvokeFunction
            - lambda:ListFunctions
            Resource: '*'
            Effect: Allow
          - Action:
            - cloudformation:CreateStack
            - cloudformation:DeleteStack
            - cloudformation:DescribeStacks
            - cloudformation:UpdateStack
            - cloudformation:CreateChangeSet
            - cloudformation:DeleteChangeSet
            - cloudformation:DescribeChangeSet
            - cloudformation:ExecuteChangeSet
            - cloudformation:SetStackPolicy
            - cloudformation:ValidateTemplate
            - cloudformation:DescribeStackResources
            - elasticmapreduce:ListClusters
            - elasticmapreduce:DescribeCluster
            - elasticmapreduce:AddJobFlowSteps
            - elasticmapreduce:ListSteps
            - elasticmapreduce:DescribeStep
            - codepipeline:PutJobFailureResult
            - codepipeline:PutJobSuccessResult
            - servicecatalog:*
            - codecommit:BatchGetRepositories
            - codecommit:Get*
            - codecommit:List*
            - codecommit:CreateBranch
            - codecommit:Put*
            - codecommit:Test*
            - codecommit:Update*
            - codecommit:GitPull
            - codecommit:GitPush    
            - iam:PassRole
            - iam:CreateServiceSpecificCredential
            - iam:ListServiceSpecificCredentials
            - iam:UpdateServiceSpecificCredential
            - iam:DeleteServiceSpecificCredential
            - iam:ResetServiceSpecificCredential 
            - iam:GetRole        
            - iam:CreateRole
            - iam:PutRolePolicy
            - iam:CreateInstanceProfile
            - iam:AddRoleToInstanceProfile
            - iam:ListRoles
            - iam:GetPolicy
            - iam:GetInstanceProfile
            - iam:GetPolicyVersion
            - iam:AttachRolePolicy
            - iam:PassRole                       
            Resource: '*'
            Effect: Allow
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
            Effect: Allow
          - Action:
            - codebuild:BatchGetBuilds
            - codebuild:StartBuild
            Resource: '*'
            Effect: Allow
  CloudFormationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - cloudformation.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - iam:CreateRole
            - iam:CreatePolicy
            - iam:GetRole
            - iam:DeleteRole
            - iam:PutRolePolicy
            - iam:PassRole
            - iam:DeleteRolePolicy
            - iam:AttachRolePolicy
            - glue:*
            - iam:DetachRolePolicy
            - cloudformation:*
            - ec2:CreateVpc
            - ec2:*
            - elasticmapreduce:*
            - lambda:*
            - s3:*
            Resource: '*'
            Effect: Allow
          - Action:
            - s3:*
            Resource: !Sub 'arn:aws:s3:::${CodePipelineBucket}*'
            Effect: Allow

  GitUser:
    Type: "AWS::IAM::User"
    Properties: 
      Policies:
      - PolicyName: codecommitPusher
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - codecommit:BatchGetRepositories
            - codecommit:Get*
            - codecommit:List*
            - codecommit:CreateBranch
            - codecommit:Put*
            - codecommit:Test*
            - codecommit:Update*
            - codecommit:GitPull
            - codecommit:GitPush
            - iam:CreateServiceSpecificCredential
            - iam:ListServiceSpecificCredentials
            - iam:UpdateServiceSpecificCredential
            - iam:DeleteServiceSpecificCredential
            - iam:ResetServiceSpecificCredential
            Resource: '*'
            Effect: Allow 
                       
Outputs:
  PipelineName:
    Value: !Ref 'pipeline'